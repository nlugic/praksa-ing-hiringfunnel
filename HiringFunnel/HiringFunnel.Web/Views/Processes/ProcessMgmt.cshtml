@model IEnumerable<HiringFunnel.Web.ViewModels.ProcessInfo>

@{ ViewBag.Title = "HiringFunnel - Upravljanje procesima"; }
@using HiringFunnel.Data
@using HiringFunnel.Data.Models

@Styles.Render("~/Content/selectric")

@{ User login = Session["login"] as User; }

<h3>Upravljanje procesima</h3>
<hr />

<div class="phaseColumnContainer">
    <div id="Contact_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Kontakti</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="Interview_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Intervjui</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="Test_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Testovi</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="TestDefense_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Odbrane testa</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="Offer_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Ponude</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="Acceptance_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Primljeni</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="Rejection_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Odbijeni</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
    <div id="Quit_Phase" class="phaseColumn" ondrop="drop(event, this)" ondragover="allowDrop(event)">
        <div class="phaseColumnHeader">
            <h5>Odustali</h5>
            <hr />
        </div>
        <div class="phaseCardContainer"></div>
    </div>
</div>

@if (login.Role <= UserLevel.HR)
{
    <div>
        <button class="btn btn-success col-md-2" type="button" onclick="newProcessModal()">
            <span class="glyphicon glyphicon-plus"></span>
            <span>Dodaj proces</span>
        </button>
    </div>

    <!-- MODALNA FORMA ZA KREIRANJE NOVOG PROCESA -->
    <div id="modalNewProcess" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close" type="button" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Novi proces</h4>
                </div>
                @{ Html.RenderAction("NewProcess", "Processes"); }
            </div>
        </div>
    </div>

    <table id="process-mgmt-table" class="table table-hover table-striped table-condensed">
        <!-- ovde crta datatable -->
    </table>
}

<!-- MODALNA FORMA ZA POTVRDU ZAVRSETKA PROCESA -->
<div id="modalEndProcess" class="modal fade">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button class="close" type="button" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Završi proces</h4>
            </div>
            <div class="modal-body">
                <p>Da li ste sigurni da želite da završite ovaj proces?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" type="button" data-dismiss="modal">Ne</button>
                <button class="btn btn-warning" type="button" data-dismiss="modal" onclick="endProcess(this)">
                    <span class="glyphicon glyphicon-off"></span>
                    <span>Završi</span>
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/selectric")

    <script type="text/javascript">

        $(document).ready(() => {
            loadAllPhases();
        });

        function drag(e) {
            e.dataTransfer.setData("text", e.target.id);
        }

        function allowDrop(e) {
            e.preventDefault();
        }

        function drop(e, element) {
            e.preventDefault();
            let cardId = e.dataTransfer.getData("text");
            let newPhase = element.id;

            if ($('#' + newPhase + " > .phaseCardContainer").get(0) === $('#' + cardId).parent().get(0))
                return;

            $.ajax({
                url: '@Url.Action("SetPhase", "ProcessInstances")',
                type: 'POST',
                data: {
                    'processInstanceId': cardId,
                    'newPhase': newPhase,
                    'userId': userId
                },
                success: () => {
                    $('#' + newPhase + " > .phaseCardContainer").prepend($('#' + cardId));
                }
            });
        }

        function printDiv(data) {
            return "<a id='" + data.Id + "' href='../../ProcessInstances/ProcessInstanceDetails/" + data.Id + "'\
                            draggable='true' ondragstart='drag(event)'>\
                            <div class='phaseInfoCard'>\
                                <label>" + data.ContactName + "</label>\
                                <hr />\
                                <label>" + data.ProcessName + "</label>\
                            </div>\
                        </a>";
        }

        let userId = @login.Id;
        let userRole = @((int)login.Role);

        function loadAllPhases() {
            let reqData = { processId: 0 };

            if (userRole === 2)
                reqData.userId = userId;

            $.ajax({
                url: '@Url.Action("GetInstancesData", "ProcessInstances")',
                type: 'POST',
                data: reqData,
                success: (response) => {
                    let contactDiv = $('#Contact_Phase > .phaseCardContainer');
                    let interviewDiv = $('#Interview_Phase > .phaseCardContainer');
                    let testDiv = $('#Test_Phase > .phaseCardContainer');
                    let testDefenseDiv = $('#TestDefense_Phase > .phaseCardContainer');
                    let offerDiv = $('#Offer_Phase > .phaseCardContainer');
                    let acceptDiv = $('#Acceptance_Phase > .phaseCardContainer');
                    let rejectDiv = $('#Rejection_Phase > .phaseCardContainer');
                    let quitDiv = $('#Quit_Phase > .phaseCardContainer');

                    response.Contacts.forEach(ph => contactDiv.prepend(printDiv(ph)) );
                    response.Interviews.forEach(ph => interviewDiv.prepend(printDiv(ph)) );
                    response.Tests.forEach(ph => testDiv.prepend(printDiv(ph)) );
                    response.TestDefenses.forEach(ph => testDefenseDiv.prepend(printDiv(ph)) );
                    response.Offers.forEach(ph => offerDiv.prepend(printDiv(ph)) );
                    response.Accepts.forEach(ph => acceptDiv.prepend(printDiv(ph)) );
                    response.Rejects.forEach(ph => rejectDiv.prepend(printDiv(ph)) );
                    response.Quits.forEach(ph => quitDiv.prepend(printDiv(ph)) );
                }
            });
        }

    </script>

    @if (login.Role <= UserLevel.HR)
    {
     
        <script type="text/javascript">

            $(document).ready(() => {
                $('select[name=Technologies]').selectric({
                    maxHeight: 200,
                    responsive: true,
                    preventWindowScroll: true,
                    inheritOriginalWidth: true,
                });

                $('select[name=Seniority]').selectric({
                    maxHeight: 200,
                    responsive: true,
                    preventWindowScroll: true,
                    inheritOriginalWidth: true,
                });
            });

            function newProcessModal() {
                $('#modalNewProcess input').val('');
                $('#modalNewProcess select[name=Technologies] > option').prop('selected', '');
                $('#modalNewProcess select[name=Seniority] > option').each((ind) => {
                    if (ind == 0)
                        $(this).prop('selected', 'true');
                    $(this).prop('selected', '');
                });
                $('#modalNewProcess select').selectric('refresh');

                $('#modalNewProcess').modal("show");
            }

            function addNewTechnology() {
                let newTechName = $('input[name=newTechName]').val();
                let exists = $('select[name=Technologies] > option').filter((ind, elem) => {
                    return (elem.innerHTML === newTechName);
                });

                if (exists.length > 0)
                {
                    exists.prop('selected', 'true');
                    $('select[name=Technologies]').selectric('refresh');
                }
                else
                {
                    $.ajax({
                        url: '@Url.Action("AddNewTechnology", "Data")',
                        type: 'POST',
                        data: {
                            'newTechName': newTechName
                        },
                        success: (response) => {
                            $('select[name=Technologies]').append('<option value="' + response.newTechId + '" selected>' + newTechName + '</option>');
                            $('select[name=Technologies]').selectric('refresh');
                        }
                    });
                }

                $('input[name=newTechName]').val('');
            }

            function endProcessModal(e) {
                let processId = e.value;

                $('#modalEndProcess .btn.btn-warning').val(processId);
                $('#modalEndProcess').modal("show");
            }

            function endProcess(e) {
                let processId = e.value;

                $.ajax({
                    url: '@Url.Action("EndProcess", "Processes")',
                    type: 'POST',
                    data: {
                        'processId': processId
                    },
                    success: () => {
                        $('a[href="ProcessDetails/' + processId + '"]').html("<span class='glyphicon glyphicon-info-sign'></span>\
                                                                              <span>Info</span>");
                        $('#process-mgmt-table .btn.btn-danger[value=' + processId + ']').remove();
                    }
                });
            }

            var assetListProcessPhases;

            $(() => {
                assetListProcessPhases = {
                    dt: null,
                    init: () => {
                        dt = $('#process-mgmt-table').DataTable({
                            "serverSide": true,
                            "processing": true,
                            "autoWidth": false,
                            "pageLength": 5,
                            "dom": 'ftp',
                            "language": {
                                "paginate": {
                                    "next": "<span>→</span>", //Sledeća
                                    "previous": "<span>←</span>" //Prethodna
                                },
                                "search": "<span>Pretraži procese (po nazivu ili potrebnom iskustvu): <span>",
                                "emptyTable": "Nema podataka za prikaz."
                            },
                            "ajax": {
                                "url": "@Url.Action("GetProcessData", "Data")",
                                "type": "POST",
                                "dataSrc": (json) => {
                                    json.data.forEach(row => {
                                        if (row.EndDate === "...")
                                            row.EndDate = "Nema";
                                    });

                                    return json.data;
                                }
                            },
                            "columns": [
                                { "title": "@Html.DisplayNameFor(model => model.Name)", "data": "Name", "searchable": true, "sortable": true, "width": "28%" },
                                { "title": "@Html.DisplayNameFor(model => model.Technologies)", "data": "Technologies", "searchable": true, "sortable": false, "width": "25%" },
                                { "title": "@Html.DisplayNameFor(model => model.Seniority)", "data": "Seniority", "searchable": false, "sortable": true, "width": "11%" },
                                { "title": "@Html.DisplayNameFor(model => model.StartDate)", "data": "StartDate", "searchable": false, "sortable": true, "width": "9%" },
                                { "title": "@Html.DisplayNameFor(model => model.EndDate)", "data": "EndDate", "searchable": false, "sortable": true, "width": "7%" },
                                {
                                    "searchable": false, "sortable": false, "width": "20%",
                                    render: (data, type, row) => {
                                        let btnGroupHtml = "<div class='buttonGroupCenter'>\
                                                        <div class='btn-group btn-group-sm'>\
                                                        <a class='btn btn-primary' href='ProcessDetails/" + row.Id + "'>\
                                                        <span class='glyphicon glyphicon-info-sign'></span>\
                                                        <span>Info</span>";

                                        if (row.EndDate === "Nema")
                                            btnGroupHtml += "<span> &amp;</span>\
                                                         <span>Izmeni</span>\
                                                         <span class='glyphicon glyphicon-edit'></span></a>\
                                                         <button class='btn btn-danger' value='" + row.Id + "' onclick='endProcessModal(this)'>\
                                                         <span class='glyphicon glyphicon-off'></span>\
                                                         <span>Završi proces</span></button>";
                                        else
                                            btnGroupHtml += "</a>";

                                        btnGroupHtml += "</div></div>";

                                        return btnGroupHtml;
                                    }
                                }
                            ]
                        });
                    }
                };

                assetListProcessPhases.init();

            });

        </script>

    }

}