@using HiringFunnel.Web.ViewModels;
@model UserInfo

@{ ViewBag.Title = "HiringFunnel - Podaci o korisniku"; }
@using HiringFunnel.Data;
@using HiringFunnel.Data.Models;
@using HiringFunnel.Data.DAL;

@Styles.Render("~/Content/selectric")

@{ User login = Session["login"] as User; }

<h3>Podaci o korisniku</h3>
<hr />

@using (Html.BeginForm(actionName: "EditUser", controllerName: "Users"))
{
    @Html.AntiForgeryToken()

    <input type="hidden" name="editUserId" value="@Model.Id" />

    <div id="editForm" class="form-horizontal formContainer">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Seniority, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @{ int selSen = (int)(Model.Seniority); }
                <select name="Seniority" class="form-control" size="1" disabled="disabled">
                    @{ Array seniorities = Enum.GetValues(typeof(SeniorityLevel)); }
                    @foreach (SeniorityLevel sen in seniorities)
                    {
                        <option value="@((int)sen)" selected="@((int)sen == selSen ? true : false)">@sen</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @{ int selRol = (int)(Model.Role); }
                <select name="Role" class="form-control" size="1" disabled="disabled">
                    @{ Array roles = Enum.GetValues(typeof(UserLevel)); }
                    @foreach (UserLevel role in roles)
                    {
                        <option value="@((int)role)" selected="@((int)role == selRol ? true : false)">@role</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Technologies, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9 techInputs">
                <select class="form-control" name="Technologies" disabled="disabled" multiple>
                    @{
                        ICollection<Technology> allTech = null;
                        ICollection<Technology> userTech = null;
                        using (HFContext hfdb = new HFContext())
                        {
                            allTech = hfdb.Technologies.ToList();
                            User eUsr = hfdb.Users.Find(Model.Id);

                            userTech = eUsr.Technologies;
                        }
                    }
                    <option value="">Odaberi tehnologije</option>
                    @foreach (Technology uTech in userTech)
                    {
                        <option value="@uTech.Id" selected>@uTech.Name</option>
                        allTech.Remove(uTech);
                    }
                    @foreach (Technology aTech in allTech)
                    {
                        <option value="@aTech.Id">@aTech.Name</option>
                    }
                </select>
                <input class="form-control" type="text" name="newTechName" placeholder="Dodaj novu tehnologiju..." disabled="disabled" />
                <button class="btn btn-sm btn-success" type="button" onclick="addNewTechnology()" disabled="disabled">
                    <span class="glyphicon glyphicon-plus"></span>
                    <span>Dodaj</span>
                </button>
            </div>
        </div>

        <div class="form-group confirmButtonContainer">
            <a class="btn btn-default" href="@Url.Action("UserMgmt", "Users")">
                <span class="glyphicon glyphicon-arrow-left"></span>
                <span>Nazad</span>
            </a>
            @if (login.Role == UserLevel.Admin || login.Id == Model.Id)
            {
                <button class="btn btn-primary" type="button" onclick="passwordModal()">
                    <span class="glyphicon glyphicon-lock"></span>
                    <span>Promena lozinke</span>
                </button>
                <button id="editStartButton" class="btn btn-primary" type="button" onclick="editMode(this)">
                    <span class="glyphicon glyphicon-edit"></span>
                    <span>Izmeni</span>
                </button>
                <button id="editButton" class="btn btn-success" type="button" onclick="editModal()">
                    <span class="glyphicon glyphicon-arrow-right"></span>
                    <span>Sačuvaj</span>
                </button>
            }
        </div>
    </div>
    
    <!-- MODALNA FORMA ZA POTVRDJIVANJE IZMENA -->
    <div id="modalEdit" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close" type="button" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Izmena korisnika</h4>
                </div>
                <div class="modal-body">
                    <p>Da li ste sigurni da želite da sačuvate ove izmene?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" type="button" data-dismiss="modal">Ne</button>
                    <button class="btn btn-success" type="submit">
                        <span class="glyphicon glyphicon-floppy-save"></span>
                        <span>Sačuvaj</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm(actionName: "ChangePassword", controllerName: "Users"))
{
    @Html.AntiForgeryToken()

    <input type="hidden" name="changePassId" value="@Model.Id" />

    <!-- MODALNA FORMA ZA PROMENU LOZINKE -->
    <div id="modalPassword" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close" type="button" onclick="passwordModalReset()" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Promena lozinke</h4>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            <label class="control-label col-md-3" for="Password">Nova lozinka</label>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-3" for="ConfirmPassword">Potvrdi lozinku</label>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" type="button" onclick="passwordModalReset()" data-dismiss="modal">Nazad</button>
                    <!-- trebalo bi da klik generise jos jedan modal za potvrdu umesto submita! -->
                    <button class="btn btn-success" type="submit">
                        <span class="glyphicon glyphicon-log-in"></span>
                        <span>Promeni lozinku</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts
{

    @Scripts.Render("~/bundles/selectric")

    @Scripts.Render("~/bundles/usercontact")

    <script type="text/javascript">

        $(document).ready(() => {
            $('#editButton').hide();

            initUserSelectric();
        });

        function editMode(e) {
            $(e).hide();
            $('.form-control').removeAttr('disabled');
            $('.techInputs > button').removeAttr('disabled');
            $('select[name=Seniority]').selectric('refresh');
            $('select[name=Role]').selectric('refresh');
            $('select[name=Technologies]').selectric('refresh');
            $('#editButton').show();
        }

        function editModal() {
            let errors = false;
            $('div span.text-danger.field-validation-error').each((ind, elem) => {
                errors &= elem.html();
            });
            if (!errors)
                $('#modalEdit').modal("show");
        }

        function passwordModal() {
            passwordModalReset();
            $('#modalPassword').modal("show");
        }

        function passwordModalReset() {
            $('input[type="password"]').val("");
            $('#modalPassword span.text-danger.field-validation-error').html("");
        }

    </script>
    
}